<jqassistant-rules xmlns="http://schema.jqassistant.org/rule/v2.2"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://schema.jqassistant.org/rule/v2.2 https://jqassistant.github.io/jqassistant/current/schema/jqassistant-rule-v2.2.xsd">

    <group id="pmd:Default">
        <includeConcept refId="pmd:LinkClassLevelViolations"/>
        <includeConcept refId="pmd:LinkMethodLevelViolations"/>
        <includeConcept refId="pmd:LinkMethodLevelViolationsSingleCandidate"/>
        <includeConcept refId="pmd:CopyCyclomaticComplexity"/>
        <includeConcept refId="pmd:CopyNcssLineCount"/>

        <includeConstraint refId="pmd:ClassLevelViolationNotLinked"/>
        <includeConstraint refId="pmd:MethodLevelViolationNotLinked"/>
    </group>

    <concept id="pmd:LinkViolations">
        <requiresConcept refId="biojava:IdentifyBiojavaTypes"/>
        <description>Link PMD Violations to source code nodes.</description>
    </concept>

    <concept id="pmd:LinkClassLevelViolations">
        <providesConcept refId="pmd:LinkViolations"/>
        <description>Link PMD Violations on class level to the class nodes</description>
        <cypher><![CDATA[
            MATCH  (v:Pmd:Violation),
                   (t:Biojava:Type:Java{fqn: v.package + "." + v.className})
            WHERE  NOT exists(v.method)
            MERGE  (t)-[:HAS_VIOLATION]->(v)
            RETURN count(DISTINCT t) AS LinkedTypes
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="pmd:LinkMethodLevelViolations">
        <providesConcept refId="pmd:LinkViolations"/>
        <description>Link PMD Violations on method level to the method nodes</description>
        <cypher><![CDATA[
            MATCH  (v:Pmd:Violation),
                   (t:Biojava:Type{fqn: v.package + "." + v.className}),
                   (t)-[:DECLARES]->(m:Method)
            WITH   v, t, m, size(split(t.name, "$")) AS l
            WITH   v, t, m, split(t.name, "$")[l - 1] AS TypeName
            WITH   v, t, m, replace(m.name, "<init>", TypeName) AS MethodName
            WHERE  v.method = MethodName
            OPTIONAL MATCH (m)-[:HAS]->(p:Parameter)-[:OF_TYPE]->(pType:Type)
            WITH   v, t, m, p, pType, size(split(pType.name, "$")) AS l
            WITH   v, t, m, p, split(pType.name,"$")[l - 1] AS ParamType
            ORDER BY t, m, p.index ASC, ParamType
            WITH   v, t, m, collect(ParamType) AS params
            WITH   v, t, m, REDUCE(mergedParams = "",param IN params | mergedParams + CASE WHEN mergedParams = '' THEN '' ELSE ', ' END + param) AS mergedParams
            WITH   v, t, m, "(" + mergedParams + ")'" AS ParamList
            WITH   v, t, m, ParamList, replace(v.message, "...", "") AS Message
            WHERE  Message CONTAINS ParamList
            MERGE  (m)-[:HAS_VIOLATION]->(v)
            RETURN count(DISTINCT m) AS LinkedMethods
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="pmd:LinkMethodLevelViolationsSingleCandidate">
        <providesConcept refId="pmd:LinkViolations"/>
        <description>Link PMD Violations on method level to method nodes where there is only one candidate based on the number of parameters</description>
        <cypher><![CDATA[
            MATCH  (v:Pmd:Violation),
                   (t:Biojava:Type{fqn: v.package + "." + v.className}),
                   (t)-[:DECLARES]->(m:Method)
            WITH   v, t, m, size(split(t.name, "$")) AS l
            WITH   v, t, m, split(t.name, "$")[l - 1] AS TypeName
            WITH   v, t, m, replace(m.name, "<init>", TypeName) AS MethodName
            WHERE  v.method = MethodName
            OPTIONAL MATCH (m)-[:HAS]->(p:Parameter)-[:OF_TYPE]->(pType:Type)
            WITH   v, t, m, count(p) AS ParameterCount
            WITH   v, t, m, ParameterCount
            WITH   v, t, m, ParameterCount, split(split(v.message, "(")[1], ")'")[0] AS MessageParameters
            WITH   v, t, m, ParameterCount, CASE WHEN size(MessageParameters) = 0 THEN 0 ELSE size(split(MessageParameters, ",")) END AS MessageParameterCount
            WHERE  ParameterCount = MessageParameterCount
            WITH   v, t, collect(m) AS Candidates
            WHERE  size(Candidates) = 1
            UNWIND Candidates AS m
            MERGE  (m)-[:HAS_VIOLATION]->(v)
            RETURN count(DISTINCT m) AS LinkedMethods
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="pmd:CopyCyclomaticComplexity">
        <requiresConcept refId="pmd:LinkViolations"/>
        <description>Copy the PMD cyclomatic complexity of the class to the type node</description>
        <cypher><![CDATA[
            MATCH  (j:Java)-[:HAS_VIOLATION]->(v:Pmd:Violation{rule: "CyclomaticComplexity"})
            WITH   split(v.message, " complexity of ") AS parts, j
            WITH   split(parts[1], " ")[0] AS complexity, j
            SET    j.pmdCyclomaticComplexity = toInteger(complexity)
            RETURN count(DISTINCT j) AS CopiedValues
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="pmd:CopyNcssLineCount">
        <requiresConcept refId="pmd:LinkViolations"/>
        <description>Copy the PMD ncss line count of the class to the type node</description>
        <cypher><![CDATA[
            MATCH (j:Java)-[:HAS_VIOLATION]->(v:Pmd:Violation{rule: "NcssCount"})
            WITH   split(v.message, " line count of ") AS parts, j
            WITH   split(parts[1], " ")[0] AS ncss, j
            SET    j.ncssLineCount = toInteger(ncss)
            RETURN count(DISTINCT j) AS CopiedValues
        ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <constraint id="pmd:ClassLevelViolationNotLinked">
        <requiresConcept refId="pmd:LinkClassLevelViolations"/>
        <description>Sanity check to see that all class violations were mapped to class nodes</description>
        <cypher><![CDATA[
            MATCH  (v:Pmd:Violation)
            WHERE  NOT exists(v.method) AND NOT (:Type)-[:HAS_VIOLATION]->(v)
            RETURN v.package AS Package, v.className AS Class, v.message AS Violation
        ]]></cypher>
    </constraint>

    <constraint id="pmd:MethodLevelViolationNotLinked">
        <requiresConcept refId="pmd:LinkMethodLevelViolations"/>
        <requiresConcept refId="pmd:LinkMethodLevelViolationsSingleCandidate"/>
        <description>Sanity check to see that all method violations were mapped to method nodes</description>
        <cypher><![CDATA[
            MATCH  (v:Pmd:Violation)
            WHERE  exists(v.method) AND NOT (:Method)-[:HAS_VIOLATION]->(v)
            RETURN v.package AS Package, v.className AS Class, v.method AS Method, v.message AS Violation
        ]]></cypher>
    </constraint>

</jqassistant-rules>